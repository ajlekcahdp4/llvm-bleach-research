#import "/utils/todo.typ": TODO
= Исследование и построение решения задачи
В данной главе мы обсудим возможные решения проблем существующих лифтеров в LLVM
IR. Отличительной чертой предложенного подхода будет являться минимализация
ручного описания архитектуры.

== Использование описания архитектуры из LLVM
Прежде всего мы решим проблемы поддержания низкоуровневой информации об
инструкциях, регистрах и расширениях. Как уже было сказано, многие существующие
инструмены поддерживают собственное описание инструкций для работы с машинным
кодом. Предлагается полностью решить эту проблему, переиспользовав уже
существующие описания. LLVM, являясь компиляторной инфраструктурой, обязан уметь
корректно порождать и читать машинный код. Большим плюсом этой платформы
является развитое описание всех инструкций и всех расширений RISC-V (Как и
подавляющего большинства других архитектур, таких как X86, ARM, MIPS и даже
SPIRV). LLVM обладает информацие о кодировках, операндах, семантике ассемблера
всех инструкций из большинства существующих расширений RISC-V. Вместо того,
чтобы описывать всю эту информацию вручную предлагается преиспользовать
существующее описание инструкций из LLVM. Большим плюсом такого подхода является
снижение вероятности ошибки. Все расширения, поддержанные в LLVM косвенно
тестируются компилятором `clang`. Это означает, что если в описании некого
расширения допущена ошибка, то компиляция под архитектуру процессора,
включающего это расширение либо произойдёт ошибка, либо исполнение программы
будет некорректным, что приведёт к мотивации исправить недочёт в описании для
стабильной работы компилятора `clang`. Таким образом в нашем инструменте будет
доступна корректная информация о всех расширениях RISC-V, поддержанных
компилятором `clang` (Таких расширений на момент написания данной работы больше
100).

Рассмотрим подробнее средства средства взаимодействия с машинным описанием, предоставляемые библиотекой LLVM.
