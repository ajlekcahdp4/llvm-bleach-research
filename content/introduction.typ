#import "/utils/todo.typ": TODO

= Введение

== Бинарная совместимость

Бинарный код состоит из закодированных иструкций для конкретной архитектуры
комманд. При компиляции программы её код на высокоуровневом языке
програмирования (Например C/C++/Fortran) переводится в бинарный код целевой
архитектуры и операционной системы.

Бинарной совместимостью называется возможность исполнения бинарного кода,
скомпилированного под одну архитектуру команд и операционную систему на других
устройствах и системах без модификации этой программы. Бинарная совместимость
является одной из фундаментальных проблем в сфере компьютерных технологий в
связи с постоянным развитием архитектур набора команд и операционных систем.

Основными проблемами для бинарной совместимости являются:
+ Различные архитектуры команд (ISA). Процессорные архитектуры являются главной
  причиной бинарной несовместимости. Процессоры каждой архитектуры исполняют свой
  уникальный набор команд и не работают с другими. Кроме различия в наборе
  инструкций архитектуры могут также отличаются размерос инструкций. Например, X86
  и RISC-V поддерживают инструкции разной длины, в то время как ARM фиксирует
  длину всех инструкций в 4 байта. Архитектуры также отличаются набором регистров,
  принципами доступа к памяти а также порядком байт (например big-endian или
  little-endian). В то время как разница в наборе инструкций чаще всего влечёт за
  собой быструю остановку программы из-за невалидной инструкции, разница в порядке
  доступов к памяти при прочих равных может вызывать непредсказуемой поведение
  программы.
+ Операционные системы (ОС) также играют большую роль в бинарной несовместимости.
  Набор и мезханизм системных вызовов отличается на разных платформах (К примеру, `open` для
  Linux систем и для FreeBSD работают по разному, несмотря на общее название).
  Наборы системных вызовов также могут отличатся от версии к версии одной
  операционной системы. Например Windows не имеет фиксированного набора системных
  вызовов и они часто изменяются между версиями.
+ Соглашение о вызовах обычных функций (ABI) также значительно отличаются даже
  внутри одной архитектуры (Например программа, написанная под RISC-V процессор с
  LP64D не будет работать для RISC-V с LP64F).
+ Наконец, окружение запуска (Набор доступных на момент запуска динамических
  библиотек) также является критически важным для запуска программы и может
  значительно отличаться как от машины к машине, так и на разных версиях
  операционной системы (Например программа, слинкованная динамически для
  операционной системы Ubuntu не сможет найти динамические библиотеки на
  устройстве с операционной системой Arch, т.к. эти библиотеки будут установлены
  по другим путям)

== RISC-V
#TODO[
  Describe the research goals and/or research questions and how you address them
  by summarizing what you want to achieve in your thesis, e.g. developing a system
  and then evaluating it.
]

== Компиляторы
#TODO[
  Describe the problem that you like to address in your thesis to show the
  importance of your work. Focus on the negative symptoms of the currently
  available solution.
]
